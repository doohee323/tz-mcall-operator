# Kubernetes Secrets for MCP Client Authentication
#
# These secrets contain credentials for:
# 1. Jenkins MCP Server API authentication
# 2. Notification services (Slack, PagerDuty)
# 3. External MCP servers
#
# IMPORTANT: Replace placeholder values with actual credentials before applying!
#
---
# Secret 1: Jenkins MCP Server API Key
apiVersion: v1
kind: Secret
metadata:
  name: jenkins-mcp-credentials
  namespace: mcall-dev
type: Opaque
stringData:
  api-key: "your-jenkins-mcp-api-key-here"
  # If using multiple environments, add more keys:
  # api-key-dev: "dev-api-key"
  # api-key-prod: "prod-api-key"

---
# Secret 2: Notification Services
apiVersion: v1
kind: Secret
metadata:
  name: notification-secrets
  namespace: mcall-dev
type: Opaque
stringData:
  slack-webhook-url: "https://hooks.slack.com/services/YOUR/WEBHOOK/URL"
  pagerduty-key: "your-pagerduty-routing-key"
  email-smtp-password: "your-smtp-password"

---
# Secret 3: External MCP Server - Basic Auth
apiVersion: v1
kind: Secret
metadata:
  name: external-mcp-basic-auth
  namespace: mcall-dev
type: Opaque
stringData:
  username: "admin"
  password: "secure-password-here"

---
# Secret 4: External MCP Server - Bearer Token
apiVersion: v1
kind: Secret
metadata:
  name: external-mcp-token
  namespace: mcall-dev
type: Opaque
stringData:
  token: "your-bearer-token-here"

---
# Secret 5: Multiple API Keys
apiVersion: v1
kind: Secret
metadata:
  name: multi-service-credentials
  namespace: mcall-dev
type: Opaque
stringData:
  jenkins-api-key: "jenkins-key"
  github-api-key: "github-pat-token"
  aws-access-key: "aws-access-key-id"
  aws-secret-key: "aws-secret-access-key"
  
---
# Example: Creating secrets from files
# 
# # From literal values:
# kubectl create secret generic jenkins-mcp-credentials \
#   --from-literal=api-key='your-api-key' \
#   -n mcall-dev
#
# # From file:
# kubectl create secret generic jenkins-mcp-credentials \
#   --from-file=api-key=./api-key.txt \
#   -n mcall-dev
#
# # From env file:
# kubectl create secret generic jenkins-mcp-credentials \
#   --from-env-file=./credentials.env \
#   -n mcall-dev
#
# # Update existing secret:
# kubectl create secret generic jenkins-mcp-credentials \
#   --from-literal=api-key='new-api-key' \
#   -n mcall-dev \
#   --dry-run=client -o yaml | kubectl apply -f -
#
# # View secret (base64 decoded):
# kubectl get secret jenkins-mcp-credentials -n mcall-dev -o jsonpath='{.data.api-key}' | base64 -d

